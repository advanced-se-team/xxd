{"type": "text", "bbox": [288, 2113, 1803, 4313], "res": [{"text": "In our study, we designed three settings for APR:", "confidence": 0.996062695980072, "text_region": [[353.0, 2113.0], [1580.0, 2113.0], [1580.0, 2170.0], [353.0, 2173.0]]}, {"text": "1) Complete function generation - the input is a buggy", "confidence": 0.9787598252296448, "text_region": [[295.0, 2177.0], [1790.0, 2184.0], [1789.0, 2239.0], [295.0, 2232.0]]}, {"text": "function and the goal is to output the patched function.", "confidence": 0.9865042567253113, "text_region": [[295.0, 2253.0], [1650.0, 2253.0], [1650.0, 2308.0], [295.0, 2308.0]]}, {"text": "2) Correct code infilling - the buggy location is known and", "confidence": 0.9729632139205933, "text_region": [[297.0, 2324.0], [1794.0, 2324.0], [1794.0, 2379.0], [297.0, 2379.0]]}, {"text": "the goal is to generate the correct replacement code given the", "confidence": 0.9822129011154175, "text_region": [[295.0, 2393.0], [1796.0, 2395.0], [1796.0, 2450.0], [295.0, 2448.0]]}, {"text": "prefix and suffix of the buggy function.", "confidence": 0.9810360074043274, "text_region": [[295.0, 2468.0], [1260.0, 2468.0], [1260.0, 2523.0], [295.0, 2523.0]]}, {"text": "3) Single line generation - the bug location is provided and", "confidence": 0.984893798828125, "text_region": [[297.0, 2539.0], [1796.0, 2539.0], [1796.0, 2594.0], [297.0, 2594.0]]}, {"text": "the bug is fixed by a single line change. Single line generation", "confidence": 0.9881247282028198, "text_region": [[297.0, 2613.0], [1794.0, 2613.0], [1794.0, 2665.0], [297.0, 2665.0]]}, {"text": "uses a subset of bugs in correct code infilling. We separate", "confidence": 0.9868444800376892, "text_region": [[297.0, 2684.0], [1796.0, 2684.0], [1796.0, 2736.0], [297.0, 2736.0]]}, {"text": "this case since many fault-localization techniques provides a", "confidence": 0.9953576326370239, "text_region": [[297.0, 2752.0], [1801.0, 2752.0], [1801.0, 2805.0], [297.0, 2805.0]]}, {"text": "ranking in the granularity of individual code lines [46], [56].", "confidence": 0.9934149384498596, "text_region": [[295.0, 2828.0], [1794.0, 2823.0], [1794.0, 2876.0], [295.0, 2881.0]]}, {"text": "More importantly, both infilling and generative LLMs can be", "confidence": 0.9863255620002747, "text_region": [[297.0, 2899.0], [1796.0, 2899.0], [1796.0, 2952.0], [297.0, 2952.0]]}, {"text": "applied for this setting, enabling direct comparison of the two", "confidence": 0.9970292448997498, "text_region": [[302.0, 2968.0], [1789.0, 2968.0], [1789.0, 3021.0], [302.0, 3021.0]]}, {"text": "We now describe the different inputs for each setting.", "confidence": 0.9862771034240723, "text_region": [[295.0, 3034.0], [1614.0, 3044.0], [1613.0, 3099.0], [295.0, 3089.0]]}, {"text": "1) Complete function generation: For this setting, the initial", "confidence": 0.9733693599700928, "text_region": [[360.0, 3112.0], [1794.0, 3112.0], [1794.0, 3167.0], [360.0, 3167.0]]}, {"text": "input is the original buggy function. We aim to use a generative", "confidence": 0.9936178922653198, "text_region": [[295.0, 3181.0], [1796.0, 3183.0], [1796.0, 3238.0], [295.0, 3236.0]]}, {"text": "model to autoregressively generate the entire patched version", "confidence": 0.9884740710258484, "text_region": [[297.0, 3257.0], [1796.0, 3257.0], [1796.0, 3309.0], [297.0, 3309.0]]}, {"text": "of the buggy function. However, naively feeding the LLMs", "confidence": 0.9825825095176697, "text_region": [[297.0, 3328.0], [1798.0, 3328.0], [1798.0, 3380.0], [297.0, 3380.0]]}, {"text": "the buggy function will not work since each LLM is not pre.", "confidence": 0.9890635013580322, "text_region": [[297.0, 3399.0], [1787.0, 3399.0], [1787.0, 3454.0], [297.0, 3454.0]]}, {"text": "trained for APR (i.e., they do not know that the goal is to", "confidence": 0.9720485210418701, "text_region": [[299.0, 3470.0], [1798.0, 3470.0], [1798.0, 3522.0], [299.0, 3522.0]]}, {"text": "generate a patched function). Therefore, to facilitate the direct", "confidence": 0.9914398193359375, "text_region": [[292.0, 3541.0], [1801.0, 3534.0], [1801.0, 3596.0], [293.0, 3603.0]]}, {"text": "usage of LLMs for APR, we use specific prompts to enable the", "confidence": 0.9963418841362, "text_region": [[299.0, 3612.0], [1796.0, 3614.0], [1796.0, 3669.0], [299.0, 3667.0]]}, {"text": "models to perform few-shot learning. This allows the LLMs", "confidence": 0.9887323379516602, "text_region": [[297.0, 3685.0], [1798.0, 3685.0], [1798.0, 3738.0], [297.0, 3738.0]]}, {"text": "to recognize the task and generate a patched function by", "confidence": 0.9843009114265442, "text_region": [[295.0, 3758.0], [1794.0, 3758.0], [1794.0, 3811.0], [295.0, 3811.0]]}, {"text": "completing the input provided. We note here that the task of", "confidence": 0.9850590229034424, "text_region": [[295.0, 3830.0], [1798.0, 3825.0], [1799.0, 3880.0], [295.0, 3885.0]]}, {"text": "complete function generation makes no assumption of 1) the", "confidence": 0.9905598759651184, "text_region": [[297.0, 3903.0], [1796.0, 3903.0], [1796.0, 3955.0], [297.0, 3955.0]]}, {"text": "location of the bug and 2) the type of bug or fix required.", "confidence": 0.9779555797576904, "text_region": [[297.0, 3972.0], [1794.0, 3972.0], [1794.0, 4027.0], [297.0, 4027.0]]}, {"text": "Therefore, the LLM needs to figure out why the function is", "confidence": 0.9942777156829834, "text_region": [[297.0, 4040.0], [1799.0, 4043.0], [1798.0, 4098.0], [297.0, 4095.0]]}, {"text": "buggy and provide a patch to fix the bug.", "confidence": 0.9881847500801086, "text_region": [[295.0, 4114.0], [1316.0, 4118.0], [1316.0, 4171.0], [295.0, 4166.0]]}, {"text": "Figure 1 shows the input which is made up of two ex-", "confidence": 0.9611009359359741, "text_region": [[356.0, 4185.0], [1796.0, 4187.0], [1796.0, 4242.0], [356.0, 4240.0]]}, {"text": "ample bug fixes (one crafted by us and one from the same", "confidence": 0.9769749641418457, "text_region": [[295.0, 4253.0], [1799.0, 4256.0], [1798.0, 4311.0], [295.0, 4308.0]]}], "img_idx": 0}
{"type": "text", "bbox": [1868, 2102, 3379, 3376], "res": [{"text": "project/dataset the target bug is from) in order to demonstrate", "confidence": 0.9860034584999084, "text_region": [[1873.0, 2108.0], [3373.0, 2104.0], [3373.0, 2156.0], [1873.0, 2161.0]]}, {"text": "the task and the expected format of the output. To start off, we", "confidence": 0.9906109571456909, "text_region": [[1874.0, 2172.0], [3371.0, 2175.0], [3371.0, 2225.0], [1874.0, 2221.0]]}, {"text": "follow the prior study [32] and begin with a description of the", "confidence": 0.9913147687911987, "text_region": [[1874.0, 2244.0], [3368.0, 2244.0], [3368.0, 2303.0], [1874.0, 2303.0]]}, {"text": "task: # Provide a fix for the buggy function. This", "confidence": 0.9805077910423279, "text_region": [[1876.0, 2317.0], [3373.0, 2317.0], [3373.0, 2370.0], [1876.0, 2370.0]]}, {"text": "describes in natural language the task we want the LLM to", "confidence": 0.972437858581543, "text_region": [[1877.0, 2385.0], [3376.0, 2387.0], [3376.0, 2440.0], [1877.0, 2438.0]]}, {"text": "perform. This is a Python example and we use the Python", "confidence": 0.9915725588798523, "text_region": [[1874.0, 2460.0], [3371.0, 2459.0], [3371.0, 2513.0], [1874.0, 2514.0]]}, {"text": "comment format of # as a prefix for this description (we", "confidence": 0.9823040962219238, "text_region": [[1881.0, 2532.0], [3366.0, 2532.0], [3366.0, 2586.0], [1881.0, 2586.0]]}, {"text": "use other comment prefixes depending on the language of the", "confidence": 0.9879629611968994, "text_region": [[1877.0, 2602.0], [3373.0, 2602.0], [3373.0, 2661.0], [1877.0, 2661.0]]}, {"text": "buggy code). We then provide an example bug and patch pair", "confidence": 0.985986590385437, "text_region": [[1877.0, 2674.0], [3371.0, 2675.0], [3371.0, 2729.0], [1877.0, 2728.0]]}, {"text": "In Figure 1, this example is a function which computes the", "confidence": 0.9892626404762268, "text_region": [[1881.0, 2745.0], [3366.0, 2749.0], [3366.0, 2803.0], [1881.0, 2799.0]]}, {"text": "Fibonacci number. We prefix the example buggy and fixed", "confidence": 0.9735249876976013, "text_region": [[1876.0, 2817.0], [3376.0, 2817.0], [3376.0, 2876.0], [1876.0, 2876.0]]}, {"text": "function with # Buggy Function and # Fixed Function", "confidence": 0.9808478951454163, "text_region": [[1874.0, 2887.0], [3376.0, 2894.0], [3376.0, 2946.0], [1874.0, 2940.0]]}, {"text": "to provide additional context for the model. For our second", "confidence": 0.9889577031135559, "text_region": [[1874.0, 2964.0], [3373.0, 2960.0], [3373.0, 3010.0], [1874.0, 3013.0]]}, {"text": "example, we follow the same prompting style and pick a buggy", "confidence": 0.9862099885940552, "text_region": [[1882.0, 3029.0], [3371.0, 3034.0], [3371.0, 3093.0], [1882.0, 3088.0]]}, {"text": "and patched function pair from the same project that the bug is", "confidence": 0.9978391528129578, "text_region": [[1881.0, 3104.0], [3373.0, 3105.0], [3373.0, 3159.0], [1881.0, 3158.0]]}, {"text": "from. This way we can provide the model with some example:", "confidence": 0.9888813495635986, "text_region": [[1879.0, 3177.0], [3360.0, 3177.0], [3360.0, 3229.0], [1879.0, 3229.0]]}, {"text": "7", "confidence": 0.08101692795753479, "text_region": [[3344.0, 3194.0], [3359.0, 3194.0], [3359.0, 3212.0], [3344.0, 3212.0]]}, {"text": "of the coding style used in the project. Finally, we finish the", "confidence": 0.9963381886482239, "text_region": [[1881.0, 3247.0], [3371.0, 3249.0], [3371.0, 3303.0], [1881.0, 3301.0]]}, {"text": "orompt by adding the bug we want to fix.", "confidence": 0.9911602139472961, "text_region": [[1887.0, 3320.0], [2905.0, 3320.0], [2905.0, 3368.0], [1887.0, 3368.0]]}], "img_idx": 0}
{"type": "text", "bbox": [1868, 3435, 3378, 3846], "res": [{"text": "2) Correct code infilling:", "confidence": 0.9820165634155273, "text_region": [[1933.0, 3438.0], [2570.0, 3446.0], [2569.0, 3491.0], [1932.0, 3483.0]]}, {"text": "Unlike complete function gen-", "confidence": 0.9734205007553101, "text_region": [[2599.0, 3446.0], [3367.0, 3441.0], [3367.0, 3489.0], [2600.0, 3495.0]]}, {"text": "2", "confidence": 0.03865450248122215, "text_region": [[2570.0, 3466.0], [2590.0, 3466.0], [2590.0, 3480.0], [2570.0, 3480.0]]}, {"text": "eration, where the buggy location within the function is not", "confidence": 0.9927817583084106, "text_region": [[1881.0, 3507.0], [3377.0, 3507.0], [3377.0, 3560.0], [1881.0, 3560.0]]}, {"text": "known. For correct code infilling, the input is the prefix and", "confidence": 0.9952138662338257, "text_region": [[1873.0, 3575.0], [3375.0, 3576.0], [3375.0, 3636.0], [1873.0, 3634.0]]}, {"text": "suffix after removing the buggy code hunk. In order to fill in", "confidence": 0.9765864610671997, "text_region": [[1879.0, 3649.0], [3376.0, 3649.0], [3376.0, 3708.0], [1879.0, 3708.0]]}, {"text": "the correct code, both the prefix and suffix can provide useful", "confidence": 0.9846798181533813, "text_region": [[1876.0, 3724.0], [3370.0, 3724.0], [3370.0, 3772.0], [1876.0, 3772.0]]}, {"text": "information. As a result, generative models are not suitable for", "confidence": 0.9845985174179077, "text_region": [[1877.0, 3793.0], [3372.0, 3795.0], [3372.0, 3840.0], [1877.0, 3838.0]]}], "img_idx": 0}
{"type": "text", "bbox": [293, 489, 1805, 1965], "res": [{"text": "with 7.6% containing open-source Github code.", "confidence": 0.9846730828285217, "text_region": [[350.0, 526.0], [1514.0, 527.0], [1514.0, 581.0], [350.0, 580.0]]}, {"text": "Codex [28] A 12B parameter GPT-3 based model designed", "confidence": 0.9932126998901367, "text_region": [[339.0, 599.0], [1794.0, 600.0], [1794.0, 650.0], [339.0, 648.0]]}, {"text": "for code generation. Codex is initialized with GPT-3 weights", "confidence": 0.9900028705596924, "text_region": [[348.0, 672.0], [1792.0, 672.0], [1792.0, 724.0], [348.0, 724.0]]}, {"text": "trained on natural language corpus and then finetuned on a", "confidence": 0.9904045462608337, "text_region": [[348.0, 740.0], [1796.0, 740.0], [1796.0, 799.0], [348.0, 799.0]]}, {"text": "large corpus of 159GB code files.", "confidence": 0.9882110953330994, "text_region": [[350.0, 815.0], [1178.0, 815.0], [1178.0, 868.0], [350.0, 868.0]]}, {"text": "2)InfillingModels:", "confidence": 0.984675407409668, "text_region": [[356.0, 898.0], [832.0, 898.0], [832.0, 947.0], [356.0, 947.0]]}, {"text": "CodeT5 [52] A 220M parameter model based on T5 [43] ar-", "confidence": 0.9737023711204529, "text_region": [[348.0, 979.0], [1792.0, 979.0], [1792.0, 1031.0], [348.0, 1031.0]]}, {"text": "chitecture designed for code related tasks. CodeT5 is trained", "confidence": 0.9935808181762695, "text_region": [[353.0, 1050.0], [1797.0, 1050.0], [1797.0, 1103.0], [353.0, 1103.0]]}, {"text": "using span prediction objective on 8.35 million functions", "confidence": 0.9815982580184937, "text_region": [[350.0, 1125.0], [1797.0, 1120.0], [1797.0, 1173.0], [350.0, 1178.0]]}, {"text": "across 8 different programming languages by combining", "confidence": 0.9738786816596985, "text_region": [[351.0, 1194.0], [1792.0, 1194.0], [1792.0, 1248.0], [351.0, 1248.0]]}, {"text": "CodeSearchNet [53] with C/C# dataset from BigQuery [54]", "confidence": 0.987769365310669, "text_region": [[350.0, 1265.0], [1791.0, 1267.0], [1791.0, 1316.0], [350.0, 1314.0]]}, {"text": " INCoDER [33] A model designed for code infilling by", "confidence": 0.9777745604515076, "text_region": [[332.0, 1334.0], [1792.0, 1338.0], [1792.0, 1392.0], [332.0, 1388.0]]}, {"text": "adopting a causal masking objective [45]. INCoDER is", "confidence": 0.985321044921875, "text_region": [[351.0, 1410.0], [1800.0, 1410.0], [1800.0, 1464.0], [351.0, 1464.0]]}, {"text": "trained on both open-source Github/GitLab code (159 GB)", "confidence": 0.9963537454605103, "text_region": [[351.0, 1483.0], [1791.0, 1483.0], [1791.0, 1531.0], [351.0, 1531.0]]}, {"text": "and StackOverFlow questions and answers (57 GB). We use", "confidence": 0.9902509450912476, "text_region": [[351.0, 1555.0], [1796.0, 1555.0], [1796.0, 1602.0], [351.0, 1602.0]]}, {"text": "both the 1.3B and 6.7B parameter version.", "confidence": 0.9961099624633789, "text_region": [[345.0, 1623.0], [1392.0, 1626.0], [1392.0, 1676.0], [345.0, 1672.0]]}, {"text": "Codex In addition to using Codex as a generative model, we", "confidence": 0.9900503754615784, "text_region": [[342.0, 1696.0], [1797.0, 1696.0], [1797.0, 1750.0], [342.0, 1750.0]]}, {"text": "use the recently added suffix feature [55] to perform code", "confidence": 0.9686568975448608, "text_region": [[350.0, 1768.0], [1791.0, 1768.0], [1791.0, 1820.0], [350.0, 1820.0]]}, {"text": "infilling. Since Codex is not open-sourced, we do not know", "confidence": 0.9847965240478516, "text_region": [[351.0, 1843.0], [1792.0, 1843.0], [1792.0, 1890.0], [351.0, 1890.0]]}, {"text": "how the model performs the infilling.", "confidence": 0.9679904580116272, "text_region": [[348.0, 1908.0], [1268.0, 1913.0], [1268.0, 1960.0], [348.0, 1955.0]]}], "img_idx": 0}
{"type": "title", "bbox": [292, 2017, 1097, 2063], "res": [], "img_idx": 0}
{"type": "title", "bbox": [2061, 1999, 3190, 2053], "res": [], "img_idx": 0}
{"type": "figure", "bbox": [1974, 288, 3301, 1483], "res": [{"text": "Example", "confidence": 0.999498724937439, "text_region": [[2145.0, 338.0], [2285.0, 338.0], [2285.0, 372.0], [2145.0, 372.0]]}, {"text": "\u2460", "confidence": 0.5537094473838806, "text_region": [[2275.0, 339.0], [2332.0, 339.0], [2332.0, 371.0], [2275.0, 371.0]]}, {"text": "# Provide a fix for the buggy function", "confidence": 0.986785888671875, "text_region": [[2378.0, 334.0], [3101.0, 336.0], [3100.0, 372.0], [2378.0, 370.0]]}, {"text": "# Buggy Function", "confidence": 0.9754054546356201, "text_region": [[2379.0, 378.0], [2686.0, 378.0], [2686.0, 411.0], [2379.0, 411.0]]}, {"text": "def fibonacci(n):", "confidence": 0.9995073676109314, "text_region": [[2379.0, 415.0], [2680.0, 418.0], [2680.0, 451.0], [2379.0, 448.0]]}, {"text": "if n == 0:", "confidence": 0.9410086870193481, "text_region": [[2451.0, 455.0], [2629.0, 458.0], [2629.0, 487.0], [2451.0, 484.0]]}, {"text": "Example Bug", "confidence": 0.9562053680419922, "text_region": [[2128.0, 470.0], [2300.0, 474.0], [2300.0, 507.0], [2127.0, 504.0]]}, {"text": "return 0", "confidence": 0.9814097881317139, "text_region": [[2523.0, 495.0], [2668.0, 495.0], [2668.0, 525.0], [2523.0, 525.0]]}, {"text": "elif n == 1 or n == 2:", "confidence": 0.9705381989479065, "text_region": [[2451.0, 533.0], [2839.0, 534.0], [2839.0, 563.0], [2451.0, 562.0]]}, {"text": "return 1", "confidence": 0.9975714683532715, "text_region": [[2523.0, 573.0], [2667.0, 573.0], [2667.0, 602.0], [2523.0, 602.0]]}, {"text": "Bug Fix", "confidence": 0.9956684112548828, "text_region": [[2038.0, 607.0], [2168.0, 607.0], [2168.0, 641.0], [2038.0, 641.0]]}, {"text": "else:", "confidence": 0.9998739361763, "text_region": [[2452.0, 610.0], [2541.0, 613.0], [2540.0, 642.0], [2451.0, 639.0]]}, {"text": "Example", "confidence": 0.9992924928665161, "text_region": [[2038.0, 643.0], [2166.0, 643.0], [2166.0, 678.0], [2038.0, 678.0]]}, {"text": "return fibonacci(n-1) - fibonacci(n-2)", "confidence": 0.9840797781944275, "text_region": [[2521.0, 650.0], [3193.0, 650.0], [3193.0, 682.0], [2521.0, 682.0]]}, {"text": "# Fixed Function", "confidence": 0.9735183715820312, "text_region": [[2376.0, 686.0], [2687.0, 688.0], [2687.0, 721.0], [2376.0, 719.0]]}, {"text": "def fibonacci(n):", "confidence": 0.9820997714996338, "text_region": [[2380.0, 728.0], [2680.0, 728.0], [2680.0, 761.0], [2380.0, 761.0]]}, {"text": "if n == 0:", "confidence": 0.9410086870193481, "text_region": [[2451.0, 765.0], [2629.0, 768.0], [2629.0, 797.0], [2451.0, 794.0]]}, {"text": "Example Fix", "confidence": 0.9763036966323853, "text_region": [[2136.0, 791.0], [2307.0, 791.0], [2307.0, 820.0], [2136.0, 820.0]]}, {"text": "return 0", "confidence": 0.9669772982597351, "text_region": [[2521.0, 807.0], [2667.0, 804.0], [2668.0, 833.0], [2522.0, 836.0]]}, {"text": "elif n == 1 or n == 2:", "confidence": 0.960350751876831, "text_region": [[2451.0, 843.0], [2839.0, 844.0], [2839.0, 873.0], [2451.0, 872.0]]}, {"text": "return 1", "confidence": 0.9971193075180054, "text_region": [[2523.0, 884.0], [2667.0, 884.0], [2667.0, 912.0], [2523.0, 912.0]]}, {"text": "else:", "confidence": 0.999930739402771, "text_region": [[2452.0, 918.0], [2540.0, 923.0], [2538.0, 954.0], [2450.0, 949.0]]}, {"text": "return fibonacci(n-1) + fibonacci(n-2)", "confidence": 0.9977840781211853, "text_region": [[2521.0, 960.0], [3192.0, 962.0], [3192.0, 991.0], [2521.0, 989.0]]}, {"text": "+", "confidence": 0.9136152863502502, "text_region": [[2391.0, 974.0], [2407.0, 974.0], [2407.0, 988.0], [2391.0, 988.0]]}, {"text": "Example", "confidence": 0.9996079802513123, "text_region": [[2145.0, 1063.0], [2282.0, 1063.0], [2282.0, 1097.0], [2145.0, 1097.0]]}, {"text": "2\uff09", "confidence": 0.700462281703949, "text_region": [[2300.0, 1067.0], [2328.0, 1067.0], [2328.0, 1090.0], [2300.0, 1090.0]]}, {"text": "# Provide a fix for the buggy function", "confidence": 0.9665381908416748, "text_region": [[2378.0, 1058.0], [3099.0, 1060.0], [3099.0, 1097.0], [2378.0, 1096.0]]}, {"text": "# Buggy Function", "confidence": 0.956084132194519, "text_region": [[2377.0, 1097.0], [2687.0, 1101.0], [2687.0, 1140.0], [2376.0, 1136.0]]}, {"text": "example_bug }", "confidence": 0.9890403151512146, "text_region": [[2415.0, 1140.0], [2649.0, 1143.0], [2648.0, 1176.0], [2415.0, 1173.0]]}, {"text": "Previous Bug", "confidence": 0.9677501320838928, "text_region": [[2111.0, 1167.0], [2298.0, 1171.0], [2297.0, 1200.0], [2111.0, 1197.0]]}, {"text": "#", "confidence": 0.9736186861991882, "text_region": [[2382.0, 1188.0], [2400.0, 1188.0], [2400.0, 1206.0], [2382.0, 1206.0]]}, {"text": "Fixed Function", "confidence": 0.9688647389411926, "text_region": [[2397.0, 1183.0], [2667.0, 1183.0], [2667.0, 1211.0], [2397.0, 1211.0]]}, {"text": "and Fix", "confidence": 0.996327817440033, "text_region": [[2150.0, 1201.0], [2262.0, 1201.0], [2262.0, 1230.0], [2150.0, 1230.0]]}, {"text": "example_fix }", "confidence": 0.9954158067703247, "text_region": [[2416.0, 1220.0], [2649.0, 1220.0], [2649.0, 1253.0], [2416.0, 1253.0]]}, {"text": "Buggy", "confidence": 0.9992784261703491, "text_region": [[2040.0, 1261.0], [2167.0, 1271.0], [2164.0, 1311.0], [2037.0, 1301.0]]}, {"text": "Project", "confidence": 0.9996210336685181, "text_region": [[2012.0, 1311.0], [2191.0, 1314.0], [2190.0, 1357.0], [2011.0, 1354.0]]}, {"text": "# Provide a fix for the buggy function", "confidence": 0.9650295376777649, "text_region": [[2376.0, 1314.0], [3101.0, 1318.0], [3100.0, 1356.0], [2376.0, 1352.0]]}, {"text": "#", "confidence": 0.9884896874427795, "text_region": [[2383.0, 1361.0], [2408.0, 1361.0], [2408.0, 1385.0], [2383.0, 1385.0]]}, {"text": "Buggy Function", "confidence": 0.9735878109931946, "text_region": [[2396.0, 1360.0], [2686.0, 1360.0], [2686.0, 1393.0], [2396.0, 1393.0]]}, {"text": "Target Bug", "confidence": 0.9601120948791504, "text_region": [[2113.0, 1374.0], [2281.0, 1377.0], [2280.0, 1415.0], [2112.0, 1412.0]]}, {"text": "bug}", "confidence": 0.9977056980133057, "text_region": [[2410.0, 1396.0], [2508.0, 1399.0], [2507.0, 1435.0], [2409.0, 1431.0]]}, {"text": "# Fixed Function", "confidence": 0.9433596730232239, "text_region": [[2378.0, 1437.0], [2684.0, 1437.0], [2684.0, 1466.0], [2378.0, 1466.0]]}], "img_idx": 0}
{"type": "figure", "bbox": [1862, 3878, 3378, 4210], "res": [{"text": "prefix", "confidence": 0.9997963905334473, "text_region": [[2051.0, 3919.0], [2158.0, 3913.0], [2159.0, 3944.0], [2053.0, 3950.0]]}, {"text": "prefix", "confidence": 0.9998500943183899, "text_region": [[2817.0, 3927.0], [2924.0, 3924.0], [2925.0, 3956.0], [2818.0, 3960.0]]}, {"text": "primes = []", "confidence": 0.9936266541481018, "text_region": [[2186.0, 3937.0], [2352.0, 3937.0], [2352.0, 3967.0], [2186.0, 3967.0]]}, {"text": "primes = []", "confidence": 0.9887081384658813, "text_region": [[2950.0, 3949.0], [3116.0, 3949.0], [3116.0, 3979.0], [2950.0, 3979.0]]}, {"text": "Buggy", "confidence": 0.9990178942680359, "text_region": [[1895.0, 3975.0], [1987.0, 3981.0], [1985.0, 4013.0], [1893.0, 4008.0]]}, {"text": "for n in range(2, max + 1):", "confidence": 0.9835242033004761, "text_region": [[2186.0, 3967.0], [2588.0, 3968.0], [2588.0, 4000.0], [2186.0, 3998.0]]}, {"text": "single", "confidence": 0.9994927048683167, "text_region": [[2054.0, 3981.0], [2161.0, 3985.0], [2160.0, 4018.0], [2053.0, 4014.0]]}, {"text": "Buggy", "confidence": 0.9990913271903992, "text_region": [[2660.0, 3985.0], [2754.0, 3993.0], [2751.0, 4024.0], [2657.0, 4017.0]]}, {"text": "for n in range(2, max + 1):", "confidence": 0.9910637736320496, "text_region": [[2950.0, 3979.0], [3350.0, 3980.0], [3349.0, 4011.0], [2950.0, 4010.0]]}, {"text": "Function", "confidence": 0.9996892213821411, "text_region": [[1869.0, 4011.0], [2014.0, 4015.0], [2013.0, 4041.0], [1868.0, 4038.0]]}, {"text": "linebug", "confidence": 0.9336353540420532, "text_region": [[2029.0, 4011.0], [2172.0, 4018.0], [2170.0, 4049.0], [2027.0, 4042.0]]}, {"text": "<INFILL>", "confidence": 0.9922796487808228, "text_region": [[2326.0, 4002.0], [2445.0, 4002.0], [2445.0, 4028.0], [2326.0, 4028.0]]}, {"text": "Function", "confidence": 0.9998403787612915, "text_region": [[2632.0, 4020.0], [2778.0, 4023.0], [2777.0, 4055.0], [2631.0, 4051.0]]}, {"text": "primes.append(n)", "confidence": 0.9998507499694824, "text_region": [[2254.0, 4035.0], [2494.0, 4035.0], [2494.0, 4065.0], [2254.0, 4065.0]]}, {"text": "return primes", "confidence": 0.9985917210578918, "text_region": [[2188.0, 4066.0], [2382.0, 4069.0], [2381.0, 4096.0], [2187.0, 4093.0]]}, {"text": "suffix", "confidence": 0.9995191693305969, "text_region": [[2050.0, 4095.0], [2156.0, 4091.0], [2158.0, 4122.0], [2051.0, 4126.0]]}, {"text": "a)", "confidence": 0.9578016996383667, "text_region": [[2260.0, 4173.0], [2293.0, 4173.0], [2293.0, 4200.0], [2260.0, 4200.0]]}, {"text": "b)", "confidence": 0.9927327036857605, "text_region": [[2958.0, 4168.0], [2996.0, 4168.0], [2996.0, 4201.0], [2958.0, 4201.0]]}], "img_idx": 0}
{"type": "figure", "bbox": [2096, 1643, 3169, 1967], "res": [{"text": "prefix", "confidence": 0.9999198913574219, "text_region": [[2384.0, 1686.0], [2508.0, 1682.0], [2509.0, 1717.0], [2385.0, 1721.0]]}, {"text": "primes = []", "confidence": 0.9594354629516602, "text_region": [[2629.0, 1713.0], [2828.0, 1713.0], [2828.0, 1748.0], [2629.0, 1748.0]]}, {"text": "Buggy", "confidence": 0.9990653991699219, "text_region": [[2162.0, 1757.0], [2289.0, 1766.0], [2286.0, 1807.0], [2159.0, 1797.0]]}, {"text": "for n in range(2, max + 1):", "confidence": 0.9840843081474304, "text_region": [[2629.0, 1752.0], [3113.0, 1752.0], [3113.0, 1786.0], [2629.0, 1786.0]]}, {"text": "<INFILL>", "confidence": 0.9930639266967773, "text_region": [[2710.0, 1792.0], [2851.0, 1795.0], [2850.0, 1823.0], [2709.0, 1821.0]]}, {"text": "Function", "confidence": 0.9998127222061157, "text_region": [[2122.0, 1810.0], [2325.0, 1813.0], [2325.0, 1848.0], [2122.0, 1845.0]]}, {"text": "primes.append(n)", "confidence": 0.9994544982910156, "text_region": [[2793.0, 1834.0], [3077.0, 1834.0], [3077.0, 1865.0], [2793.0, 1865.0]]}, {"text": "return primes", "confidence": 0.9797717332839966, "text_region": [[2630.0, 1874.0], [2864.0, 1876.0], [2864.0, 1904.0], [2630.0, 1902.0]]}, {"text": "suffix", "confidence": 0.9988822937011719, "text_region": [[2382.0, 1902.0], [2505.0, 1902.0], [2505.0, 1937.0], [2382.0, 1937.0]]}], "img_idx": 0}
{"type": "figure_caption", "bbox": [2048, 4234, 3194, 4288], "res": [], "img_idx": 0}
{"type": "figure_caption", "bbox": [1983, 1523, 3297, 1578], "res": [], "img_idx": 0}
{"type": "figure_caption", "bbox": [2060, 2000, 3192, 2053], "res": [], "img_idx": 0}
